--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=9 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_fla
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[8..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[8..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode3607w[1..0]	: WIRE;
	w_anode3616w[3..0]	: WIRE;
	w_anode3633w[3..0]	: WIRE;
	w_anode3643w[3..0]	: WIRE;
	w_anode3653w[3..0]	: WIRE;
	w_anode3663w[3..0]	: WIRE;
	w_anode3673w[3..0]	: WIRE;
	w_anode3683w[3..0]	: WIRE;
	w_anode3693w[3..0]	: WIRE;
	w_anode3705w[1..0]	: WIRE;
	w_anode3712w[3..0]	: WIRE;
	w_anode3723w[3..0]	: WIRE;
	w_anode3733w[3..0]	: WIRE;
	w_anode3743w[3..0]	: WIRE;
	w_anode3753w[3..0]	: WIRE;
	w_anode3763w[3..0]	: WIRE;
	w_anode3773w[3..0]	: WIRE;
	w_anode3783w[3..0]	: WIRE;
	w_data3605w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[8..0] = eq_wire[8..0];
	eq_wire[] = ( ( w_anode3783w[3..3], w_anode3773w[3..3], w_anode3763w[3..3], w_anode3753w[3..3], w_anode3743w[3..3], w_anode3733w[3..3], w_anode3723w[3..3], w_anode3712w[3..3]), ( w_anode3693w[3..3], w_anode3683w[3..3], w_anode3673w[3..3], w_anode3663w[3..3], w_anode3653w[3..3], w_anode3643w[3..3], w_anode3633w[3..3], w_anode3616w[3..3]));
	w_anode3607w[] = ( (w_anode3607w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode3616w[] = ( (w_anode3616w[2..2] & (! w_data3605w[2..2])), (w_anode3616w[1..1] & (! w_data3605w[1..1])), (w_anode3616w[0..0] & (! w_data3605w[0..0])), w_anode3607w[1..1]);
	w_anode3633w[] = ( (w_anode3633w[2..2] & (! w_data3605w[2..2])), (w_anode3633w[1..1] & (! w_data3605w[1..1])), (w_anode3633w[0..0] & w_data3605w[0..0]), w_anode3607w[1..1]);
	w_anode3643w[] = ( (w_anode3643w[2..2] & (! w_data3605w[2..2])), (w_anode3643w[1..1] & w_data3605w[1..1]), (w_anode3643w[0..0] & (! w_data3605w[0..0])), w_anode3607w[1..1]);
	w_anode3653w[] = ( (w_anode3653w[2..2] & (! w_data3605w[2..2])), (w_anode3653w[1..1] & w_data3605w[1..1]), (w_anode3653w[0..0] & w_data3605w[0..0]), w_anode3607w[1..1]);
	w_anode3663w[] = ( (w_anode3663w[2..2] & w_data3605w[2..2]), (w_anode3663w[1..1] & (! w_data3605w[1..1])), (w_anode3663w[0..0] & (! w_data3605w[0..0])), w_anode3607w[1..1]);
	w_anode3673w[] = ( (w_anode3673w[2..2] & w_data3605w[2..2]), (w_anode3673w[1..1] & (! w_data3605w[1..1])), (w_anode3673w[0..0] & w_data3605w[0..0]), w_anode3607w[1..1]);
	w_anode3683w[] = ( (w_anode3683w[2..2] & w_data3605w[2..2]), (w_anode3683w[1..1] & w_data3605w[1..1]), (w_anode3683w[0..0] & (! w_data3605w[0..0])), w_anode3607w[1..1]);
	w_anode3693w[] = ( (w_anode3693w[2..2] & w_data3605w[2..2]), (w_anode3693w[1..1] & w_data3605w[1..1]), (w_anode3693w[0..0] & w_data3605w[0..0]), w_anode3607w[1..1]);
	w_anode3705w[] = ( (w_anode3705w[0..0] & data_wire[3..3]), enable_wire);
	w_anode3712w[] = ( (w_anode3712w[2..2] & (! w_data3605w[2..2])), (w_anode3712w[1..1] & (! w_data3605w[1..1])), (w_anode3712w[0..0] & (! w_data3605w[0..0])), w_anode3705w[1..1]);
	w_anode3723w[] = ( (w_anode3723w[2..2] & (! w_data3605w[2..2])), (w_anode3723w[1..1] & (! w_data3605w[1..1])), (w_anode3723w[0..0] & w_data3605w[0..0]), w_anode3705w[1..1]);
	w_anode3733w[] = ( (w_anode3733w[2..2] & (! w_data3605w[2..2])), (w_anode3733w[1..1] & w_data3605w[1..1]), (w_anode3733w[0..0] & (! w_data3605w[0..0])), w_anode3705w[1..1]);
	w_anode3743w[] = ( (w_anode3743w[2..2] & (! w_data3605w[2..2])), (w_anode3743w[1..1] & w_data3605w[1..1]), (w_anode3743w[0..0] & w_data3605w[0..0]), w_anode3705w[1..1]);
	w_anode3753w[] = ( (w_anode3753w[2..2] & w_data3605w[2..2]), (w_anode3753w[1..1] & (! w_data3605w[1..1])), (w_anode3753w[0..0] & (! w_data3605w[0..0])), w_anode3705w[1..1]);
	w_anode3763w[] = ( (w_anode3763w[2..2] & w_data3605w[2..2]), (w_anode3763w[1..1] & (! w_data3605w[1..1])), (w_anode3763w[0..0] & w_data3605w[0..0]), w_anode3705w[1..1]);
	w_anode3773w[] = ( (w_anode3773w[2..2] & w_data3605w[2..2]), (w_anode3773w[1..1] & w_data3605w[1..1]), (w_anode3773w[0..0] & (! w_data3605w[0..0])), w_anode3705w[1..1]);
	w_anode3783w[] = ( (w_anode3783w[2..2] & w_data3605w[2..2]), (w_anode3783w[1..1] & w_data3605w[1..1]), (w_anode3783w[0..0] & w_data3605w[0..0]), w_anode3705w[1..1]);
	w_data3605w[2..0] = data_wire[2..0];
END;
--VALID FILE
