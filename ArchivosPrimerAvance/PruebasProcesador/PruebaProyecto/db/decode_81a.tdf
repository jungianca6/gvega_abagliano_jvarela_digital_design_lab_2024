--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone V" LPM_DECODES=9 LPM_WIDTH=4 data eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_compare 2020:11:11:17:06:45:SJ cbx_lpm_decode 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 16 
SUBDESIGN decode_81a
( 
	data[3..0]	:	input;
	eq[8..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	enable_wire1	: WIRE;
	enable_wire2	: WIRE;
	eq_node[8..0]	: WIRE;
	eq_wire1w[7..0]	: WIRE;
	eq_wire2w[7..0]	: WIRE;
	w_anode3798w[3..0]	: WIRE;
	w_anode3815w[3..0]	: WIRE;
	w_anode3825w[3..0]	: WIRE;
	w_anode3835w[3..0]	: WIRE;
	w_anode3845w[3..0]	: WIRE;
	w_anode3855w[3..0]	: WIRE;
	w_anode3865w[3..0]	: WIRE;
	w_anode3875w[3..0]	: WIRE;
	w_anode3885w[3..0]	: WIRE;
	w_anode3896w[3..0]	: WIRE;
	w_anode3906w[3..0]	: WIRE;
	w_anode3916w[3..0]	: WIRE;
	w_anode3926w[3..0]	: WIRE;
	w_anode3936w[3..0]	: WIRE;
	w_anode3946w[3..0]	: WIRE;
	w_anode3956w[3..0]	: WIRE;

BEGIN 
	data_wire[2..0] = data[2..0];
	enable_wire1 = (! data[3..3]);
	enable_wire2 = data[3..3];
	eq[] = eq_node[];
	eq_node[] = ( eq_wire2w[0..0], eq_wire1w[]);
	eq_wire1w[] = ( w_anode3875w[3..3], w_anode3865w[3..3], w_anode3855w[3..3], w_anode3845w[3..3], w_anode3835w[3..3], w_anode3825w[3..3], w_anode3815w[3..3], w_anode3798w[3..3]);
	eq_wire2w[] = ( w_anode3956w[3..3], w_anode3946w[3..3], w_anode3936w[3..3], w_anode3926w[3..3], w_anode3916w[3..3], w_anode3906w[3..3], w_anode3896w[3..3], w_anode3885w[3..3]);
	w_anode3798w[] = ( (w_anode3798w[2..2] & (! data_wire[2..2])), (w_anode3798w[1..1] & (! data_wire[1..1])), (w_anode3798w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode3815w[] = ( (w_anode3815w[2..2] & (! data_wire[2..2])), (w_anode3815w[1..1] & (! data_wire[1..1])), (w_anode3815w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode3825w[] = ( (w_anode3825w[2..2] & (! data_wire[2..2])), (w_anode3825w[1..1] & data_wire[1..1]), (w_anode3825w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode3835w[] = ( (w_anode3835w[2..2] & (! data_wire[2..2])), (w_anode3835w[1..1] & data_wire[1..1]), (w_anode3835w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode3845w[] = ( (w_anode3845w[2..2] & data_wire[2..2]), (w_anode3845w[1..1] & (! data_wire[1..1])), (w_anode3845w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode3855w[] = ( (w_anode3855w[2..2] & data_wire[2..2]), (w_anode3855w[1..1] & (! data_wire[1..1])), (w_anode3855w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode3865w[] = ( (w_anode3865w[2..2] & data_wire[2..2]), (w_anode3865w[1..1] & data_wire[1..1]), (w_anode3865w[0..0] & (! data_wire[0..0])), enable_wire1);
	w_anode3875w[] = ( (w_anode3875w[2..2] & data_wire[2..2]), (w_anode3875w[1..1] & data_wire[1..1]), (w_anode3875w[0..0] & data_wire[0..0]), enable_wire1);
	w_anode3885w[] = ( (w_anode3885w[2..2] & (! data_wire[2..2])), (w_anode3885w[1..1] & (! data_wire[1..1])), (w_anode3885w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode3896w[] = ( (w_anode3896w[2..2] & (! data_wire[2..2])), (w_anode3896w[1..1] & (! data_wire[1..1])), (w_anode3896w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode3906w[] = ( (w_anode3906w[2..2] & (! data_wire[2..2])), (w_anode3906w[1..1] & data_wire[1..1]), (w_anode3906w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode3916w[] = ( (w_anode3916w[2..2] & (! data_wire[2..2])), (w_anode3916w[1..1] & data_wire[1..1]), (w_anode3916w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode3926w[] = ( (w_anode3926w[2..2] & data_wire[2..2]), (w_anode3926w[1..1] & (! data_wire[1..1])), (w_anode3926w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode3936w[] = ( (w_anode3936w[2..2] & data_wire[2..2]), (w_anode3936w[1..1] & (! data_wire[1..1])), (w_anode3936w[0..0] & data_wire[0..0]), enable_wire2);
	w_anode3946w[] = ( (w_anode3946w[2..2] & data_wire[2..2]), (w_anode3946w[1..1] & data_wire[1..1]), (w_anode3946w[0..0] & (! data_wire[0..0])), enable_wire2);
	w_anode3956w[] = ( (w_anode3956w[2..2] & data_wire[2..2]), (w_anode3956w[1..1] & data_wire[1..1]), (w_anode3956w[0..0] & data_wire[0..0]), enable_wire2);
END;
--VALID FILE
